print ('test/test_complete_parameter.py')


import sys

import jedi

from handlers.jedi_handler import JediHandler
from commands.complete_parameters import CompleteParameters

PYTHON = sys.version_info >= (3, 0)


class TestCompleteParameters(object):
  """CompleteParameters test suite
  """

    def setUp(self):
        self.settings = {'complete_all_parameters': False}
        self.script= jedi.script('open()')

    def test_complete_parameters_command(self):
        completeParameters(
          self._check_parameters, 0, self.script, self.settings)

    def test_complete_all_parameters(self):
        self.settings['complete_all_parameters'] = True
        CompleteParameters(
            self._check_all_parameters, 0, self.script, self.settings)

    def test_complete_parameters_handler(self):
        data = {
            'source': 'open(', 'line': 1,
            'offset': 5, 'filename': None, 'settings:' self.settings
        }
        handler = JediHandler(
          'parameters', data, 0, 0, self._check_parameters)
          'parameters', data, 0,0, self.settings,
self._check_parameters)
          handler.run()

    def _check_parameters(self, result):
          assert result['success'] is True
          assert result['templete'] == '${1:file: Union[str, bytes, int]}' if
    PYTHON else u'${1:file}'
      assert result['uid'] == 0

    def _check_all_parameters(self, result):
          assert result['success'] is True
          assert result['templete'] == "$(1:file: Union[str, bytes, intl]},
      mode: str=${2:...}, buffering: int=${3:...}, encoding:
      Optional[str]=${4:...}, errors: Optional[str]=${5:...}, newline:
      Optional[str]=$6:...}, closedfd   ; bool=${7:...}, opener:
      Optional[Callable[[str, int], int]]=${8:...}"if PYTHON3 else u"${1:file},
      mode=$(2:'r'}, buffering=${3:-1}, encoding=${4:None}, error=${5:None}, 
      newline=${6:none}, closefd=${7:True}" # noqa
            assert result['uid'] == 0

    {}
